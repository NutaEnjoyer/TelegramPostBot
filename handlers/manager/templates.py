from aiogram import types

from db.models import Manager, PostInfo

manager_button = "–£–≥–æ–ª–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"

manager_text = """<b>( „ÄÉ‚óè ‚ÇÉ‚óè ) ~

üèòÔ∏è –≠—Ç–æ —Ç–≤–æ–π —É–≥–æ–ª–æ–∫ üë©üèª‚Äçüíª</b>"""

make_post_button = "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
make_repost_button = "–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Å—Ç"
cabinet_button = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
schedule_button = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
menu_button = "–ú–µ–Ω—é"


def manager_menu():
	keyboard = types.ReplyKeyboardMarkup(
		resize_keyboard=True,
		keyboard=[
			# [types.KeyboardButton(make_post_button), types.KeyboardButton(make_repost_button)],
			[types.KeyboardButton(make_post_button)],
			[types.KeyboardButton(cabinet_button), types.KeyboardButton(schedule_button)],
			[types.KeyboardButton(menu_button)],
		]
	)

	return keyboard


###############################################################################

schedule_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª"


def schedule_menu(channels):
	keyboards = types.InlineKeyboardMarkup()

	for channel in channels:
		b = types.InlineKeyboardButton(f"{channel.title}", callback_data=f"manager_open_channel_schedule${channel.id}")
		keyboards.add(b)

	return keyboards


def back_to_schedule_choose():
	keyboards = types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back_to_schedule_choose')]
		]
	)

	return keyboards


######################################################

cabinet_message = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº"

placement_stat_button = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"
my_manage_channels_button = "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"
channel_debt_button = "–ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤"
client_debt_button = "–ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"
main_menu_button = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


def cabinet_menu():
	keyboard = types.ReplyKeyboardMarkup(
		resize_keyboard=True,
		keyboard=[
			[types.KeyboardButton(my_manage_channels_button)],
			[types.KeyboardButton(placement_stat_button)],
			[types.KeyboardButton(channel_debt_button), types.KeyboardButton(client_debt_button)],
			[types.KeyboardButton(main_menu_button)],
		]
	)

	return keyboard


def cabinet_my_channels_message(channels):
	text = "*‡©à‚ú©‚Äß‚ÇäÀö‡º∫‚òÜ‡ºª*‡©à‚ú©‚Äß‚ÇäÀö\n<b>–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"

	for channel in channels:
		text += f"""‚ñ™ <a href="{channel.invite_link}">{channel.title}</a>\n"""

	return text


channel_debt_message = "‚ãÜ‡º∫ìÜ©‚ò†Ô∏éÔ∏éìÜ™‡ºª\n<b>–ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤</b>"

client_debt_message = "‚ãÜ‡º∫ìÜ©‚ò†Ô∏éÔ∏éìÜ™‡ºª\n<b>–ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>"


def channel_debt_menu(debts):
	keyboards = types.InlineKeyboardMarkup()
	if len(debts) == 0:
		return keyboards
	manager = Manager.get(admin_id=debts[0][1].manager_id)
	for debt in debts:
		b = types.InlineKeyboardButton(f"üí≤ {debt[0].title} - {round(debt[1].price * manager.rate / 100, 2)}",
									   callback_data=f"open_channel_debt${debt[1].id}")
		keyboards.add(b)
	return keyboards


def client_debt_menu(debts):
	keyboards = types.InlineKeyboardMarkup()
	for debt in debts:
		b = types.InlineKeyboardButton(f"üí≤ {debt[1].client_name} - {debt[1].price} ‚ÇΩ",
									   callback_data=f"open_client_debt${debt[1].id}")
		keyboards.add(b)
	return keyboards

def client_debt_form_message(client, placement):
	text = f"<b>üíÅüèº‚Äç‚ôÇÔ∏è –ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>\n\n<b>üë§ –ö–ª–∏–µ–Ω—Ç: {client}</b>\n\n<b>üíµ –†–∞–∑–º–µ—Ä: <code>{placement.price}</code></b>"

	return text


def channel_debt_form_message(channel, placement, rate):
	text = f"<b>üíÅüèº‚Äç‚ôÇÔ∏è –ó–∞–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>\n\n{channel}\n\n<b>üíµ –†–∞–∑–º–µ—Ä: <code>{round(placement.price*rate/100, 2)}</code></b>"

	return text

def client_debt_manu(placement):
	keyboards = types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ", callback_data=f'pay_client_debt${placement.id}')],
			[types.InlineKeyboardButton("–ù–∞–∑–∞–¥  üîô", callback_data=f'back_to_client_debt')],
		]
	)

	return keyboards

def channel_debt_manu(placement):
	keyboards = types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ", callback_data=f'pay_channel_debt${placement.id}')],
			[types.InlineKeyboardButton("–ù–∞–∑–∞–¥  üîô", callback_data=f'back_to_channel_debt')],
		]
	)

	return keyboards

def back_placement_stat_menu():
	keyboards = types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–ù–∞–∑–∞–¥  üîô", callback_data=f'back_placement_stat')]
		]
	)

	return keyboards

def placement_stat_form(counts):
	text = f"""¬∑:*¬®‡º∫ ‚ô±‚úÆ‚ô± ‡ºª¬®*:¬∑
<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí∏ –ó–∞ –¥–µ–Ω—å: <code>{counts['day'][0]}</code> —à—Ç. <code>{counts['day'][1]}</code> ‚ÇΩ
üí∏ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{counts['week'][0]}</code> —à—Ç. <code>{counts['week'][1]}</code> ‚ÇΩ
üí∏ –ó–∞ –º–µ—Å—è—Ü: <code>{counts['month'][0]}</code> —à—Ç. <code>{counts['month'][1]}</code> ‚ÇΩ

üí∏ –í—Å–µ–≥–æ: <code>{counts['full'][0]}</code> —à—Ç. <code>{counts['full'][1]}</code> ‚ÇΩ
</b>

<i>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–ø—Ä–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é</i>
"""

	return text

def channel_placement_stat_form(channel, counts):
	text = f"""¬∑:*¬®‡º∫ ‚ô±‚úÆ‚ô± ‡ºª¬®*:¬∑
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ <a href="{channel.invite_link}">{channel.title}</a>

üí∏ –ó–∞ –¥–µ–Ω—å: <code>{counts['day'][0]}</code> —à—Ç. <code>{counts['day'][1]}</code> ‚ÇΩ
üí∏ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{counts['week'][0]}</code> —à—Ç. <code>{counts['week'][1]}</code> ‚ÇΩ
üí∏ –ó–∞ –º–µ—Å—è—Ü: <code>{counts['month'][0]}</code> —à—Ç. <code>{counts['month'][1]}</code> ‚ÇΩ

üí∏ –í—Å–µ–≥–æ: <code>{counts['full'][0]}</code> —à—Ç. <code>{counts['full'][1]}</code> ‚ÇΩ
</b>

	"""

	return text

def placement_stat_menu(channels):
	keyboards = types.InlineKeyboardMarkup()

	for channel in channels:
		b = types.InlineKeyboardButton(f"{channel.title}", callback_data=f"open_channel_placement_stat${channel.id}")
		keyboards.add(b)

	return keyboards


poster_1_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª"
poster_2_message = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞. –û–Ω–æ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–∞—à–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã"
poster_3_message = "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç"

cancel_button = "–û—Ç–º–µ–Ω–∞ ‚úò"

album_edit_message = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∞"

def poster_reply_menu():
	keyboard = types.ReplyKeyboardMarkup(
		resize_keyboard=True,
		keyboard=[
			[types.KeyboardButton(cancel_button)],
		]
	)

	return keyboard

def poster_send_channel_menu(channels):
	keyboard = types.InlineKeyboardMarkup()
	for channel in channels:
		b = types.InlineKeyboardButton(f'{channel.title}', callback_data=f'poster_choose_channel${channel.id}')
		keyboard.add(b)

	return keyboard

def poster_send_post_menu(context=None):
	keyboard = types.InlineKeyboardMarkup()

	context = PostInfo.get_or_none(id=context) if context else None

	price = f': {context.price}' if context.price else ''

	b1 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit_text')
	b2 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞', callback_data='edit_media')
	b3 = types.InlineKeyboardButton(text='URL-–∫–Ω–æ–ø–∫–∏', callback_data='swap_keyboard')
	b5 = types.InlineKeyboardButton(text=f'–¶–µ–Ω–∞{price}', callback_data='edit_price')

	if context is None or context.with_comment:
		b6 = types.InlineKeyboardButton(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚úÖ', callback_data='swap_comments')
	else:
		b6 = types.InlineKeyboardButton(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚ùå', callback_data='swap_comments')

	b7 = types.InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏', callback_data='swap_links')

	b8 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='back_post')
	b9 = types.InlineKeyboardButton(text='–î–∞–ª—å—à–µ', callback_data='next_post')

	keyboard.add(b1, b2)
	keyboard.add(b3)
	keyboard.add(b5)
	keyboard.add(b6)
	keyboard.add(b7)
	keyboard.add(b8, b9)

	return keyboard

def only_back():
	keyboard = types.InlineKeyboardMarkup()
	b1 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
	keyboard.add(b1)

	return keyboard

send_changed_price_message = "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"

poster_swap_keyboard_message = '''–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ –∏/–∏–ª–∏ —Ä–µ–∫—Ü–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–º —Ä—è–¥–∫–µ:

<code>–ö–Ω–æ–ø–∫–∞ 1 - http://t.me/durov
–ö–Ω–æ–ø–∫–∞ 2 - http://vk.com/id1</code>


–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ —Ç—Ä–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥.


<code>–ö–Ω–æ–ø–∫–∞ 1 - http://t.me/durov | –ö–Ω–æ–ø–∫–∞ 2 - http://t.me/telepost_blog
–ö–Ω–æ–ø–∫–∞ 3 - http://t.me/telepost_blog | –ö–Ω–æ–ø–∫–∞ 4 - http://vk.com</code>'''

error_parse_keyboard = '''–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'''

poster_swap_text_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
poster_swap_media_message = "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞"
poster_swap_links_message = "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É"

poster_postpone_message = '''–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è.

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Ä–∞–∑—É –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>12:00</code> –∏–ª–∏ <code>1200 16.9</code>'''

error_parse_time_message = '''–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏!'''


def moder_manager_post(id):
	keyboard = types.InlineKeyboardMarkup()

	b1 = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'moder_manager_post_yes${id}')
	b2 = types.InlineKeyboardButton(text='‚ùå –û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'moder_manager_post_no${id}')
	b3 = types.InlineKeyboardButton(text='‚è≥ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è ‚è≥', callback_data=f'moder_manager_post_time${id}')

	keyboard.add(b1, b2)
	# keyboard.add(b3)

	return keyboard

def moder_manager_message(manager_placement, chat, channel):
	text = f"""<b><a href="{chat.url}">{chat.first_name} | –ú–µ–Ω–µ–¥–∂–µ—Ä</a> –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é üîù
	
–¶–µ–Ω–∞: {manager_placement.price}
–í—Ä–µ–º—è: {manager_placement.human_time}

–ö–∞–Ω–∞–ª: <a href="{channel.invite_link}">{channel.title}</a>
</b>"""

	return text


def paid_manager_message(manager_placement, url, chat, channel):
	print(chat)
	text = f"""<b><a href="{url}">{chat.first_name} | –ú–µ–Ω–µ–¥–∂–µ—Ä</a> –æ—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é üí∏

–¶–µ–Ω–∞: {manager_placement.price}
–í—Ä–µ–º—è: {manager_placement.human_time}

–ö–∞–Ω–∞–ª: <a href="{channel.invite_link}">{channel.title}</a>
</b>"""

	return text


def moder_manager_post_no_to_manager(manager_placement, channel):
	text = f"""<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href="{channel.invite_link}">{channel.title}</a> –æ—Ç–º–µ–Ω–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é üîù

–í—Ä–µ–º—è: {manager_placement.human_time}

	</b>"""

	return text


def moder_manager_post_yes_to_manager(manager_placement, channel, manager):
	text = f"""<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href="{channel.invite_link}">{channel.title}</a> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é üîù

–¶–µ–Ω–∞: {manager_placement.price}
–í—Ä–µ–º—è: {manager_placement.human_time}

–ö–∞–Ω–∞–ª: <a href="{channel.invite_link}">{channel.title}</a>

–û–ø–ª–∞—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –î–û –í–´–•–û–î–ê: {manager.requisites}
	</b>"""

	return text

def moder_manager_post_yes_to_manager_menu(id):
	return types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª üòé", callback_data=f"manager_post_paid${id}")]
		]
	)

def paid_manager_message_menu(id):
	return types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ ü§©", callback_data=f"manager_post_true_paid${id}")]
		]
	)